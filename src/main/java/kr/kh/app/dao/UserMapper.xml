<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.kh.app.dao.UserDAO">
    <select id="selectUser" resultType="kr.kh.app.model.vo.UserVO"> SELECT * FROM USER WHERE user_id
        = #{user_id} </select>
    <insert id="insertMember"> INSERT INTO USER(user_id, user_pw, user_nickname, user_email,
        user_birth, user_state_date) VALUES(#{user.id},#{user.pw},#{user.nickname}, #{user.email},
        #{user.birth}, now()) </insert>
	<select id="selectFindUser" resultType="kr.kh.app.model.vo.UserVO">
		select * from user where user_email = #{user_email} and user_birth = #{user_birth}
	</select>
	<update id="updateUserPw">
		update user set user_pw = #{user.user_pw} where user_id = #{user.user_id}
	</update>
    <select id="selectUserById" resultType="kr.kh.app.model.vo.UserVO"> SELECT * FROM USER
        WHERE user_id = #{id} </select>

    <select id="selectUserByEmail" resultType="kr.kh.app.model.vo.UserVO"> SELECT * FROM
        USER WHERE user_email = #{email} </select>

    <select id="selectUserByNickname" resultType="kr.kh.app.model.vo.UserVO"> SELECT *
        FROM USER WHERE user_nickname = #{nickname} </select>


        
    <update id="updateUser">
    	update user set user_pw = #{user.pw}, user_email = #{user.email}, user_nickname = #{user.nickname}, user_birth = #{user.birth}
    	where user_id = #{user.id}
    </update>
    
    <update id="updateDropUser">
    	update user set user_id = #{user.user_id}, user_pw = #{user.user_pw}, user_email = #{user.user_email}, user_state_date = #{user.user_state_date}, user_state = #{user.user_state}
    	where user_id = #{id}
    </update>

    <select id="selectTotalBlockedUserCount" resultType="int">
        SELECT COUNT(*) 
        FROM blocked 
        WHERE blocking_user_id = #{cri.blocking_user_id}
    </select>
    <select id="selectBlockedUserList" resultType="kr.kh.app.model.vo.BlockedVO">
        SELECT * 
        FROM blocked 
        WHERE blocking_user_id = #{cri.blocking_user_id}
        ORDER BY blocked_id DESC
        LIMIT #{cri.pageStart}, #{cri.perPageNum}
        
    </select>


    <delete id="deleteBlockedUser">
        DELETE FROM blocked 
        WHERE blocked_user_id = #{blocked.blocked_user_id} and blocking_user_id = #{blocked.blocking_user_id}
    </delete>
    
    <select id="selectUserList"  resultType="kr.kh.app.model.vo.UserVO">
    	select * from user 
    	<if test='cri.type=="nickname"'>
			where user_role not in("관리자") and (user_nickname like concat('%', #{cri.search},'%') 
			or user_nickname = #{cri.search})
		</if>
		<if test='cri.type=="id"'>
			where user_role not in("관리자") and (user_id like concat('%', #{cri.search},'%') 
			or user_id = #{cri.search})
		</if>
		order by user_id desc
		limit #{cri.pageStart}, #{cri.perPageNum}
    </select>
    
    <select id="selectTotalCount" resultType="int">
		select count(*) 
		from user where user_role not in("관리자")
	</select>
	
	<update id="updateUserByUserState">
		update user set user_state = "정지중", user_state_date = #{user.user_state_date} where user_id = #{user.user_id}
	</update>
	<update id="updateUserByUserState2">
		update user set user_state = "이용중", user_state_date = #{user.user_state_date}  where user_id = #{user.user_id}
	</update>
    <select id="selectBlockedUsers" resultType="kr.kh.app.model.vo.BlockedVO">
        SELECT * 
        FROM blocked 
        WHERE blocking_user_id = #{id.blocking_user_id}
    </select>
    
    <update id="updateUserByUserRoleUserToOp">
    	update user set user_role = "운영자" where user_id = #{user.user_id};
    </update>
    
    <update id="updateUserByUserRoleOpToUser">
    	update user set user_role = "사용자" where user_id = #{user.user_id};
    </update>

</mapper>